import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def visualize_mst_results(csv_file='mst_results.csv'):
    """
    Visualize the MST algorithm comparison results
    """
    try:
        # Read the CSV file generated by the C++ program
        df = pd.read_csv(csv_file)

        # Create figure with subplots
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

        # Plot 1: Execution time comparison
        ax1.plot(df['n'], df['prim_avg_time'], 'bo-', label="Prim's Algorithm", linewidth=2, markersize=6)
        ax1.plot(df['n'], df['kruskal_avg_time'], 'rs-', label="Kruskal's Algorithm", linewidth=2, markersize=6)
        ax1.set_xlabel('Number of Vertices (n)', fontsize=12)
        ax1.set_ylabel('Average Execution Time (μs)', fontsize=12)
        ax1.set_title('MST Algorithms: Time Complexity Comparison', fontsize=14, fontweight='bold')
        ax1.legend(fontsize=11)
        ax1.grid(True, alpha=0.3)
        ax1.set_yscale('log')  # Log scale for better visualization of growth

        # Plot 2: MST weight comparison (should be very similar)
        ax2.plot(df['n'], df['prim_avg_weight'], 'bo-', label="Prim's MST Weight", linewidth=2, markersize=6)
        ax2.plot(df['n'], df['kruskal_avg_weight'], 'rs-', label="Kruskal's MST Weight", linewidth=2, markersize=6)
        ax2.set_xlabel('Number of Vertices (n)', fontsize=12)
        ax2.set_ylabel('Average MST Weight', fontsize=12)
        ax2.set_title('MST Algorithms: Solution Quality Comparison', fontsize=14, fontweight='bold')
        ax2.legend(fontsize=11)
        ax2.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig('mst_comparison.png', dpi=300, bbox_inches='tight')
        plt.show()

        # Print statistics
        print("=== Performance Analysis ===")
        print(f"Data points: {len(df)}")
        print(f"Graph size range: {df['n'].min()} - {df['n'].max()} vertices")
        print()

        # Calculate theoretical complexity ratios
        print("=== Theoretical Time Complexity ===")
        print("Prim's Algorithm: O(V²) for dense graphs using adjacency matrix")
        print("Kruskal's Algorithm: O(E log E) = O(V² log V) for complete graphs")
        print()

        # Performance comparison for largest graph
        max_n_idx = df['n'].idxmax()
        prim_time = df.loc[max_n_idx, 'prim_avg_time']
        kruskal_time = df.loc[max_n_idx, 'kruskal_avg_time']

        print(f"=== Performance at n = {df.loc[max_n_idx, 'n']} ===")
        print(f"Prim's average time: {prim_time:.2f} μs")
        print(f"Kruskal's average time: {kruskal_time:.2f} μs")

        if prim_time < kruskal_time:
            ratio = kruskal_time / prim_time
            print(f"Prim's is {ratio:.2f}x faster")
        else:
            ratio = prim_time / kruskal_time
            print(f"Kruskal's is {ratio:.2f}x faster")

        # Verify MST weights are similar (they should be identical for same graphs)
        weight_diff = abs(df['prim_avg_weight'] - df['kruskal_avg_weight']).max()
        print(f"\nMaximum MST weight difference: {weight_diff:.10f}")
        if weight_diff < 1e-10:
            print("✓ Both algorithms produce identical MST weights (as expected)")
        else:
            print("⚠ Warning: MST weights differ (unexpected)")

    except FileNotFoundError:
        print(f"Error: Could not find {csv_file}")
        print("Make sure to run the C++ program first to generate the results.")
    except Exception as e:
        print(f"Error reading or plotting data: {e}")

def analyze_complexity_growth(csv_file='mst_results.csv'):
    """
    Analyze and visualize the complexity growth patterns
    """
    try:
        df = pd.read_csv(csv_file)

        # Create complexity analysis plot
        fig, ax = plt.subplots(1, 1, figsize=(12, 8))

        # Plot actual times
        ax.plot(df['n'], df['prim_avg_time'], 'bo-', label="Prim's (Actual)", linewidth=2, markersize=6)
        ax.plot(df['n'], df['kruskal_avg_time'], 'rs-', label="Kruskal's (Actual)", linewidth=2, markersize=6)

        # Plot theoretical complexity curves (normalized)
        n_values = df['n'].values

        # Normalize theoretical curves to match actual data at some point
        normalize_idx = len(df) // 2  # Use middle point for normalization
        n_norm = df.loc[normalize_idx, 'n']
        prim_norm = df.loc[normalize_idx, 'prim_avg_time']
        kruskal_norm = df.loc[normalize_idx, 'kruskal_avg_time']

        # O(V²) for Prim's
        theoretical_prim = prim_norm * (n_values / n_norm) ** 2
        ax.plot(n_values, theoretical_prim, 'b--', alpha=0.7, label="Prim's O(V²)", linewidth=2)

        # O(V² log V) for Kruskal's
        theoretical_kruskal = kruskal_norm * (n_values / n_norm) ** 2 * np.log(n_values) / np.log(n_norm)
        ax.plot(n_values, theoretical_kruskal, 'r--', alpha=0.7, label="Kruskal's O(V² log V)", linewidth=2)

        ax.set_xlabel('Number of Vertices (n)', fontsize=12)
        ax.set_ylabel('Execution Time (μs)', fontsize=12)
        ax.set_title('MST Algorithms: Actual vs Theoretical Complexity', fontsize=14, fontweight='bold')
        ax.legend(fontsize=11)
        ax.grid(True, alpha=0.3)
        ax.set_yscale('log')
        ax.set_xscale('log')

        plt.tight_layout()
        plt.savefig('mst_complexity_analysis.png', dpi=300, bbox_inches='tight')
        plt.show()

    except Exception as e:
        print(f"Error in complexity analysis: {e}")

if __name__ == "__main__":
    print("MST Algorithm Results Visualization")
    print("==================================")

    # Main visualization
    visualize_mst_results()

    # Complexity analysis
    print("\nGenerating complexity growth analysis...")
    analyze_complexity_growth()

    print("\nVisualization complete!")
    print("Generated files:")
    print("- mst_comparison.png: Side-by-side comparison of algorithms")
    print("- mst_complexity_analysis.png: Theoretical vs actual complexity growth")